/*
 * This file is generated by jOOQ.
 */
package io.github.adorableskullmaster.nozomi.core.database.generated.tables;


import io.github.adorableskullmaster.nozomi.core.database.generated.Public;
import io.github.adorableskullmaster.nozomi.core.database.generated.tables.records.WarsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Wars extends TableImpl<WarsRecord> {

    private static final long serialVersionUID = -1354443748;

    /**
     * The reference instance of <code>public.wars</code>
     */
    public static final Wars WARS = new Wars();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WarsRecord> getRecordType() {
        return WarsRecord.class;
    }

    /**
     * The column <code>public.wars.warid</code>.
     */
    public final TableField<WarsRecord, Integer> WARID = createField("warid", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.wars</code> table reference
     */
    public Wars() {
        this(DSL.name("wars"), null);
    }

    /**
     * Create an aliased <code>public.wars</code> table reference
     */
    public Wars(String alias) {
        this(DSL.name(alias), WARS);
    }

    /**
     * Create an aliased <code>public.wars</code> table reference
     */
    public Wars(Name alias) {
        this(alias, WARS);
    }

    private Wars(Name alias, Table<WarsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Wars(Name alias, Table<WarsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Wars(Table<O> child, ForeignKey<O, WarsRecord> key) {
        super(child, key, WARS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Wars as(String alias) {
        return new Wars(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Wars as(Name alias) {
        return new Wars(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Wars rename(String name) {
        return new Wars(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Wars rename(Name name) {
        return new Wars(name, null);
    }
}
